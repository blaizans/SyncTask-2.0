@using System.Globalization
@using global::Shared.Dtos

<div class="calendar">
    <div class="calendar-header">
        <button class="prev-button" @onclick="PrevMonth">&lt;</button>
        <h5 class="calendar-title">@CurrentMonth.ToString("MMMM yyyy")</h5>
        <button class="next-button" @onclick="NextMonth">&gt;</button>
    </div>
    <div class="calendar-body">
        <div class="calendar-weekdays">
            @foreach (var day in Weekdays)
            {
                <div class="weekday">@day</div>
            }
        </div>
        <div class="calendar-days">
            @foreach (var day in VisibleDays)
            {
                <div class="day">
                    <span class="day-number">@day.Day</span>
                    @if (dayTasks.ContainsKey(day))
                    {
                        <ul class="task-list">
                            @foreach (var task in dayTasks[day])
                            {
                                <li>@task</li>
                            }
                        </ul>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<TaskDTO> Tasks { get; set; }

    private DateTime CurrentMonth { get; set; }
    private List<string> Weekdays { get; set; }
    private List<DateTime> VisibleDays { get; set; }
    private Dictionary<DateTime, List<string>> dayTasks;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        InitializeCalendar();
    }

    private void InitializeCalendar()
    {
        CurrentMonth = DateTime.Today;
        Weekdays = GetWeekdays();
        VisibleDays = GetVisibleDays();
        dayTasks = GetTasksByDay();
    }

    private List<string> GetWeekdays()
    {
        var weekdays = new List<string>();
        var currentCulture = CultureInfo.CurrentCulture;

        for (int i = 0; i < 7; i++)
        {
            weekdays.Add(currentCulture.DateTimeFormat.AbbreviatedDayNames[i]);
        }

        return weekdays;
    }

    private List<DateTime> GetVisibleDays()
    {
        var visibleDays = new List<DateTime>();
        var firstDayOfMonth = new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(CurrentMonth.Year, CurrentMonth.Month);

        for (int i = 0; i < daysInMonth; i++)
        {
            visibleDays.Add(firstDayOfMonth.AddDays(i));
        }

        return visibleDays;
    }

    private Dictionary<DateTime, List<string>> GetTasksByDay()
    {
        var tasksByDay = new Dictionary<DateTime, List<string>>();

        if (Tasks != null && Tasks.Any())
        {
            foreach (var task in Tasks)
            {
                var taskDate = task.startDate;

                if (tasksByDay.ContainsKey(Convert.ToDateTime(taskDate)))
                {
                    tasksByDay[Convert.ToDateTime(taskDate)].Add(task.name);
                }
                else
                {
                    tasksByDay[Convert.ToDateTime(taskDate)] = new List<string> { task.name };
                }
            }
        }

        return tasksByDay;
    }

    private void PrevMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(-1);
        VisibleDays = GetVisibleDays();
        dayTasks = GetTasksByDay();
    }

    private void NextMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(1);
        VisibleDays = GetVisibleDays();
        dayTasks = GetTasksByDay();
    }
}
