@page "/Friends"
@using BlazorSyncTask.Services
@using global::Shared.Dtos
@using System.Security.Claims
@using BlazorSyncTask.Services.Http
@inject NavigationManager NavMgr


<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <div class="search-bar">
                        <input type="text" @bind-value="searchTerm" />
                        <button class="btn btn-primary" @onclick="SearchFriends">Search</button>
                    </div>
                    <ul class="friend-list">
                        @foreach (var friend in filteredFriends)
                        {
                            <li>@friend.username <button class="btn btn-success" @onclick="() => SendFriendRequest(friend.id)">Add Friend</button></li>
                        }
                    </ul>
                </div>
                <div class="col-md-4">
                    <h3>Pending Friend Requests</h3>
                    @if (pendingFriends == null)
                    {
                        <p>Loading friend requests...</p>
                    }
                    else if (pendingFriends.Count == 0)
                    {
                        <p>You have no friend requests.</p>
                    }
                    else
                    {
                        <ul class="pending-friend-list">
                            @foreach (var friend in pendingFriends)
                            {
                                <li>@friend.username 
                                    <button class="btn btn-success" @onclick="() => AcceptPendingFriends(friend.friendRequstId)">Accept</button>
                                    <button class="btn btn-danger" @onclick="() => DeletePendingFriends(friend.friendRequstId)">Decline</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h3>Your Friends</h3>
                    @if (friends == null)
                    {
                        <p>Loading friends...</p>
                    }
                    else if (friends.Count == 0)
                    {
                        <p>You have no friends yet.</p>
                    }
                    else
                    {
                        <ul class="friend-list">
                            @foreach (var friend in friends)
                            {
                                <li>
                                    @friend.username | @friend.email | @friend.fullName
                                    <button class="btn btn-danger" @onclick="() => RemoveFriends(friend.id)">Remove</button>
                                    <button class="btn btn-primary" @onclick="()=> ViewFriend(friend.id)">View Details</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>


@code { 
    [CascadingParameter]
    public static Task<AuthenticationState> AuthState { get; set; } = null!;
    private List<GetUserDto> friends;
    private List<GetUserDto> allUsers;
    private List<GetFriendsDto> pendingFriends;
    [Inject]
    private IFriendsService FriendsService { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private List<GetUserDto> filteredFriends = new List<GetUserDto>();
    private string searchTerm = "";
    
    protected override async Task OnInitializedAsync()
    {
        await GetFriendsInfo();
    }
    
    private async Task GetFriendsInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        friends = await FriendsService.GetAllFriends(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value));
        allUsers = await FriendsService.GetAllUsers();
        pendingFriends = await FriendsService.GetAllFriendsPending(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value));
    }
 
    private void SearchFriends()
    {
        if(searchTerm!="")
            filteredFriends = allUsers.Where(f => f.username.ToLower().Contains(searchTerm.ToLower())).ToList();
    }
    
    private async Task AcceptPendingFriends(int requestId)
    {
        await FriendsService.AcceptPending( requestId);
        await GetFriendsInfo();
      
    }
    
    private async Task SendFriendRequest(int friendId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await FriendsService.AddFriend(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value),friendId);
        searchTerm = "";
        filteredFriends = null;
    }
    
    private async Task DeletePendingFriends(int requestId)
    {
        await FriendsService.DeletePending( requestId);
        await GetFriendsInfo();
   
    }

    private async Task RemoveFriends(int friendId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
 
        await FriendsService.RemoveFriend(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value), friendId);
        await GetFriendsInfo();
    }
    private async Task ViewFriend(int friendId)
    {
        NavMgr.NavigateTo("/Friend?id="+friendId+"");
    }

}