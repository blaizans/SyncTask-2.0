@page "/EditTask"
@using global::Shared.Dtos
@using BlazorSyncTask.Services
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavMgr
@inject ITasksService TasksService

<AuthorizeView>
    <Authorized>
       <h3>Edit Task</h3>
       @if (showLoading)
            {
                <div class="loading-screen">
                    <div class="spinner"></div>
                    <div>Loading...</div>
                </div>
            }
       else
       {
           <div>
               <label for="name">Name:</label>
               <input id="name" @bind="@createTaskDto.name"/>
           </div>

           <div>
               <label for="description">Description:</label>
               <input id="description" @bind="@createTaskDto.description"/>
           </div>

           <div>
               <label for="startDate">Start Date:</label>
               <input id="startDate" type="date" @bind="@startD"/>
           </div>

           <div>
               <label for="endDate">End Date:</label>
               <input id="endDate" type="date" @bind="@endD"/>
           </div>

           <button @onclick="EditTasks">Edit</button>
       }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public static Task<AuthenticationState> AuthState { get; set; } = null!;
    private CreateTaskDto createTaskDto = new CreateTaskDto();
    DateTime startD=DateTime.Now.Date, endD = DateTime.Now.Date;
    private bool showLoading = false;
    private string Id;
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavMgr.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        Id = query["id"];
        await TasksService.GetTaskById(Convert.ToInt32(Id));
        
    }
    
    private async Task EditTasks() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //USER ID
        Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value);
        var uri = new Uri(NavMgr.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        Id = query["id"];


        await ShowLoading();
        NavMgr.NavigateTo("/Tasks");
    }
    private async Task ShowLoading()
    {
    //loading test
        showLoading = true;
        StateHasChanged();
        await Task.Delay(500);
        showLoading = false;
        StateHasChanged();
        NavMgr.NavigateTo($"/Groups");
    }

    
}