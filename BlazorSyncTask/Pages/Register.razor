@using BlazorSyncTask.Services
@inject IAuthService authService
@inject NavigationManager navMgr
@page "/Register"


<AuthorizeView>
    <NotAuthorized>
        <div class="row textbs" style="padding-top: 2rem; padding-bottom: 2rem; display: flex; flex-direction: revert;">
            <div class="offset-md-1 col-md-6">
                <h2>Wish to Sign-Up?</h2>
            </div>
            <div class="offset-md-3 col-md-2 logo">
                <p>synctask</p>
            </div>
            <div class="offset-md-1 col-md-6">
                <h5>Sign up and start your journey</h5>
            </div>
        </div>
        <TabPanel Name="register">
                    <Card>

                        <CardBody>
                            <Validations @ref="@registerValidationsRef" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                    <Field>
                                        <FieldLabel style="color: #1a1e21">Name</FieldLabel>
                                        <TextEdit @bind-Text="@fullName" Placeholder="Enter Your Name"/>
                                    </Field>
                                </Validation>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                    <Field>
                                        <FieldLabel style="color: #1a1e21">Username</FieldLabel>
                                        <TextEdit @bind-Text="@userName" Placeholder="Enter Your Username"/>
                                    </Field>
                                </Validation>
                                <Validation Validator="ValidationRule.IsEmail">
                                    <Field>
                                        <FieldLabel style="color: #1a1e21">Email</FieldLabel>
                                        <TextEdit @bind-Text="@email" Placeholder="Enter Your Email">
                                            <Feedback>
                                                <ValidationNone>Please Enter your email.</ValidationNone>
                                                <ValidationSuccess>Email is valid</ValidationSuccess>
                                                <ValidationError>Enter Valid email </ValidationError>
                                            </Feedback>
                                        </TextEdit>
                                    </Field>
                                </Validation>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                    <Field>
                                        <FieldLabel style="color: #1a1e21">Password</FieldLabel>
                                        <TextEdit @bind-Text="@password" Placeholder="Enter Password"/>
                                    </Field>
                                </Validation>
                            </Validations>
                        </CardBody>
                        <CardBody>
                            <Button Color="Color.Primary" Clicked="@OnRegisterClicked">
                                Create Account
                            </Button>
                        </CardBody>
                    </Card>
                </TabPanel>
     
   



        @if (!string.IsNullOrEmpty(errorLabel))
        {
            <div class="field">
                <label style="color: red">
                    @errorLabel
                </label>
            </div>
        }
        <div class="buttons" style="padding: 3rem 0 3rem 0">
          
            <div class="offset-md-10 col-md-2" style="padding-bottom: 2rem;">
                <div class="field">
                    <a class="loginbtn" @onclick="LoginAsync">Log in</a>
                </div>
            </div>


        </div>

    </NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>Hello, @context.User.Identity.Name</h3>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string fullName;
    private string userName;
    private string email;
    private string password;
    private string errorLabel;
    Validations registerValidationsRef;
    
    private async Task LoginAsync()
    {
        navMgr.NavigateTo("/login");
    }
    
    async Task OnRegisterClicked()
    {
        if (await registerValidationsRef.ValidateAll())
        {
            errorLabel = "";
            try
            {
                await authService.RegisterAsync(fullName, userName, password, email);
                navMgr.NavigateTo("/login");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                errorLabel = $"Error: {e.Message}";
            }

            await registerValidationsRef.ClearAll();
        }
    }


 

}